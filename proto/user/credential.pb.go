// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: proto/user/credential.proto

package user

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UserCredential - Represents the users hashed password and the parameters used to hash it. Hashing is performed
// with Argon2id as recommended OWASP
type UserCredential struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key - The user's hashed password represented as a string
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" bson:"key"` // @gotags: bson:"key"
	// salt - The randomly generated salt used for hashing the users password
	Salt string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty" bson:"salt"` // @gotags: bson:"salt"
	// time - The time used as a cost parameter when hashing user passwords. Usually is 1
	Time uint32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty" bson:"time"` // @gotags: bson:"time"
	// memory - The amount of memory to be used when hashing passwords. Usually 64MB's but can be modified for slower systems
	Memory uint32 `protobuf:"varint,4,opt,name=memory,proto3" json:"memory,omitempty" bson:"memory"` // @gotags: bson:"memory"
	// threads - The number of threads (or go-routines in our case) that should be used when hashing passwords
	Threads uint32 `protobuf:"varint,5,opt,name=threads,proto3" json:"threads,omitempty" bson:"threads"` // @gotags: bson:"threads"
	// key_length - The length of the generated password hash. Usually 32 or 64
	KeyLength uint32 `protobuf:"varint,6,opt,name=key_length,json=keyLength,proto3" json:"key_length,omitempty" bson:"key_length"` // @gotags: bson:"key_length"
	// salt_length - The length of the generated password salt. Usually 32
	SaltLength    uint32 `protobuf:"varint,7,opt,name=salt_length,json=saltLength,proto3" json:"salt_length,omitempty" bson:"salt_length"` // @gotags: bson:"salt_length"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserCredential) Reset() {
	*x = UserCredential{}
	mi := &file_proto_user_credential_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCredential) ProtoMessage() {}

func (x *UserCredential) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_credential_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCredential.ProtoReflect.Descriptor instead.
func (*UserCredential) Descriptor() ([]byte, []int) {
	return file_proto_user_credential_proto_rawDescGZIP(), []int{0}
}

func (x *UserCredential) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UserCredential) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *UserCredential) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UserCredential) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *UserCredential) GetThreads() uint32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *UserCredential) GetKeyLength() uint32 {
	if x != nil {
		return x.KeyLength
	}
	return 0
}

func (x *UserCredential) GetSaltLength() uint32 {
	if x != nil {
		return x.SaltLength
	}
	return 0
}

var File_proto_user_credential_proto protoreflect.FileDescriptor

const file_proto_user_credential_proto_rawDesc = "" +
	"\n" +
	"\x1bproto/user/credential.proto\x12\x04user\"\xbc\x01\n" +
	"\x0eUserCredential\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\tR\x04salt\x12\x12\n" +
	"\x04time\x18\x03 \x01(\rR\x04time\x12\x16\n" +
	"\x06memory\x18\x04 \x01(\rR\x06memory\x12\x18\n" +
	"\athreads\x18\x05 \x01(\rR\athreads\x12\x1d\n" +
	"\n" +
	"key_length\x18\x06 \x01(\rR\tkeyLength\x12\x1f\n" +
	"\vsalt_length\x18\a \x01(\rR\n" +
	"saltLengthB2Z0github.com/credstack/credstack-models/proto/userb\x06proto3"

var (
	file_proto_user_credential_proto_rawDescOnce sync.Once
	file_proto_user_credential_proto_rawDescData []byte
)

func file_proto_user_credential_proto_rawDescGZIP() []byte {
	file_proto_user_credential_proto_rawDescOnce.Do(func() {
		file_proto_user_credential_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_user_credential_proto_rawDesc), len(file_proto_user_credential_proto_rawDesc)))
	})
	return file_proto_user_credential_proto_rawDescData
}

var file_proto_user_credential_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_user_credential_proto_goTypes = []any{
	(*UserCredential)(nil), // 0: user.UserCredential
}
var file_proto_user_credential_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_user_credential_proto_init() }
func file_proto_user_credential_proto_init() {
	if File_proto_user_credential_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_user_credential_proto_rawDesc), len(file_proto_user_credential_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_user_credential_proto_goTypes,
		DependencyIndexes: file_proto_user_credential_proto_depIdxs,
		MessageInfos:      file_proto_user_credential_proto_msgTypes,
	}.Build()
	File_proto_user_credential_proto = out.File
	file_proto_user_credential_proto_goTypes = nil
	file_proto_user_credential_proto_depIdxs = nil
}
